import OpenAI from "openai";
import { editCellAi } from "./sheet-util.js";
import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
import dotenv from "dotenv";
dotenv.config();

export const exponentialBackoff = (retries) => {
  return new Promise((resolve) => {
    const delay = Math.pow(2, retries) + Math.random();
    setTimeout(resolve, delay * 1000); // Convert to milliseconds
  });
};

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.JWT_SERVICE_ACCOUNT_EMAIL,
  key: process.env.JWT_PRIVATE_KEY.split(String.raw`\n`).join("\n"),
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
console.log("process.env.OPENAI_API_KEY", process.env.OPENAI_API_KEY);
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const doc = new GoogleSpreadsheet(
  process.env.GOOGLE_SHEET_ID,
  serviceAccountAuth
);

export const aiSummorrize = async (typeSearch, listNews) => {
  await doc.loadInfo(); // loads document properties and worksheets

  const sheet =
    doc.sheetsByIndex[
      typeSearch === "search-1" ? 0 : typeSearch === "search-2" ? 1 : 2
    ]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`

  // append rows
  await sheet.loadCells("A1:Z100000");

  // const lastArticles = JSON.parse(localStorage.getItem("last-articles"));
  const resArr = [];
  // return console.log(lastArticles);
  // const lastArticlesPosition = JSON.parse(
  //   localStorage.getItem(`last-articles-position-${typeSearch}`)
  // );
  const lastArticlesPosition = listNews;
  console.log("lastArticlesPosition", lastArticlesPosition);

  if (lastArticlesPosition) {
    const arrRow = Array.from(
      { length: 41 + lastArticlesPosition.rowMaxIndex },
      (_, i) => i + 1
    );
    for (const row of arrRow) {
      try {
        console.log("Start summorize item", {
          row,
          column: lastArticlesPosition.columnIndex,
        });
        const cell = sheet.getCell(row, lastArticlesPosition.columnIndex);
        console.log("cellValue", cell.value);
        if (cell.value) {
          const cellValue = JSON.parse(cell.value.replaceAll("\n", " "));
          const completion = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content:
                  "You are a media monitoring assistant for a PR agency.",
              },
              {
                role: "user",
                content: `Please summarize the following article in 2-3 sentences. Then, determine if this article is relevant for inclusion in a weekly media monitoring report for the client.

  Article Title: ${cellValue.Title}

  Publication: ${cellValue["Publication Date"]}

  Author: ${cellValue.Author}

  Date: ${cellValue["Publication Date"]}

  URL: ${cellValue.URL}

  Content: ${cellValue.Content}

  Search context: topic_search

  For client mentions (NEC), the article should directly refer to NEC Corporation or its subsidiaries.

  For issue searches (Facial Recognition at MSG), the article should discuss facial recognition technology at Madison Square Garden.

  For topic searches (Facial Recognition general), the article should provide substantive information about facial recognition technology.

  Please format your response as follows:

  SUMMARY: [Your 2-3 sentence summary]

  RELEVANT: [Y/N]

  REASONING: [Brief explanation of relevance decision]

  `,
              },
            ],
          });
          // TODO Need to implement writing info of AI into google sheet right here cell by cell and then save it all
          // Also I should create Regexp search so it search normally

          await editCellAi(
            { row, column: lastArticlesPosition.columnIndex },
            completion.choices[0].message.content,
            typeSearch
          );
          console.log("Ended summorize item", {
            row,
            column: lastArticlesPosition.columnIndex,
          });
          await exponentialBackoff(0.5);
        }
      } catch (error) {
        const cell = sheet.getCell(row, lastArticlesPosition.columnIndex);
        const article = {};
        if (cell.value) {
          const titleRegex = /"Title"\s*:\s*"([^"]+)"/;
          const titleMatch = cell.value.match(titleRegex);
          article.title = titleMatch ? titleMatch[1] : "";

          const publicationDateRegex = /"Publication Date"\s*:\s*"([^"]+)"/;
          const publicationDateMatch = cell.value.match(publicationDateRegex);
          article.published_date = publicationDateMatch
            ? publicationDateMatch[1]
            : "";

          const authorRegex = /"Author"\s*:\s*"([^"]+)"/;
          const authorMatch = cell.value.match(authorRegex);
          article.author = authorMatch ? authorMatch[1] : "";

          const urlRegex = /"URL"\s*:\s*"([^"]+)"/;
          const urlMatch = cell.value.match(urlRegex);
          article.url = urlMatch ? urlMatch[1] : "";

          const contentRegex = /"Content"\s*:\s*"([^"]+)"/;
          const contentMatch = cell.value.match(contentRegex);
          article.content = contentMatch ? contentMatch[1] : "";
        }
        console.log("article", article);
        try {
          const completion = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content:
                  "You are a media monitoring assistant for a PR agency.",
              },
              {
                role: "user",
                content: `Please summarize the following article in 2-3 sentences. Then, determine if this article is relevant for inclusion in a weekly media monitoring report for the client.
  
    Article Title: ${article.title}
  
    Publication: ${article.publication}
  
    Author: ${article.author}
  
    Date: ${article.published_date}
  
    URL: ${article.url}
  
    Content: ${article.content}
  
    Search context: topic_search
  
    For client mentions (NEC), the article should directly refer to NEC Corporation or its subsidiaries.
  
    For issue searches (Facial Recognition at MSG), the article should discuss facial recognition technology at Madison Square Garden.
  
    For topic searches (Facial Recognition general), the article should provide substantive information about facial recognition technology.
  
    Please format your response as follows:
  
    SUMMARY: [Your 2-3 sentence summary]
  
    RELEVANT: [Y/N]
  
    REASONING: [Brief explanation of relevance decision]
  
    `,
              },
            ],
          });
          // TODO Need to implement writing info of AI into google sheet right here cell by cell and then save it all
          // Also I should create Regexp search so it search normally
          resArr.push(completion.choices[0].message.content);
          await editCellAi(
            { row, column: lastArticlesPosition.columnIndex },
            completion.choices[0].message.content,
            typeSearch
          );
          await exponentialBackoff(0.5);
        } catch (error) {
          if (error.status === 429) {
            await exponentialBackoff(0.5); // Wait with exponential backoff
            continue; // Retry the current page
          }
          console.log("error", error.status);
        }
        console.log("error", error);
      }
    }
  }
  console.log("resArr", resArr);
};
